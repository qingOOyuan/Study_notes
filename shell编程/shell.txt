shell脚本5种执行方式及脚本不同的执行方法和区别详解

我们通过编写vim a.sh，然后用不同方法执行名为a.sh的脚本。

#!/bin/bash
echo "hello word"

1）使用绝对路径执行。
2）使用相对路径执行。				语法格式：./a.sh
3）使用 sh或bash命令来执行。		语法格式： sh a.sh 不需要执行权限 -x参数
4）使用 .(空格)脚本名称来执行。 	语法格式：. a.sh 不需要执行权限(特别注意：第一个.后面有空格)
5）使用 source 来执行。 			语法格式：source a.sh 不需要执行权限(主要用于生效配置文件)

一、方式1绝对路径和方式2相对路径，可以归纳为同一种方法

新创建的脚本，默认没有x执行权限，需要给它用#chmod +x a.sh的方式，添加执行权限，才能用这两种方法执行。

二、方式3使用 sh/bash命令来执行

该方式虽然不需要手动给脚本添加x执行权限，但是它会改变脚本默认解释器类型。
比如说：脚本首行定义的是#!/bin/bash，使用该方式，它会给你改用/bin/sh解释器，
也就说，最终效果=#!/bin/sh

/bin/sh是早期版本，是一种便携方式的解释性脚本语言，自带有posix便携式功能，
以该方式声明的脚本，脚本中间发生错误会终止脚本的运行，不再运行下面的代码。

/bin/bash，是/bin/sh的升级版，默认没有开启posix便携模式，
所以以/bin/bash声明的脚本，中间即使发生错误，依然会继续向下运行。

也就是说：shell脚本，第一行写成 #!/bin/bash --posix，脚本执行效果跟#!/bin/sh是一样的。
可以简单的认为：/bin/sh ==等价于== /bin/bash  --posix

/bin/sh可能是个假shell（它是bash的软链接），它的真身很可能是/bin/bash，也可能是/bin/dash，具体发行版可能不同

特别之处：
1.不需单独给脚本分配x执行权限；
2.甚至都不需要在脚本首行声明脚本解释器类型，因为脚本是被当做该命令的参数使用的。

三、方式4使用 .(空格)脚本名称来执行

该方式不需要单独添加x执行权限，它和source类似，权限继承与bash。

四、方式5使用 source 来执行(主要用于生效配置文件)
.和source的权限，继承的是/bin/bash的权限，在执行时也是将a.sh作为参数，并不需要a.sh有执行权限；
和bash执行不一样的是，source和.不会创建子进程shell，是在当前shell进程环境下执行的，
因为他们是内建命令，所以脚本中赋值的本地变量也会影响当前shell的，用的时候一定要注意（尽量使用前面的3种方式）。

区别：

1.关于执行权限
仅前两种(相对路径、绝对路径)方法，需要chmod +x test.sh，给脚本单独添加x执行权限。
后三种方法，均不需要单独添加x执行权限。

2.关于是否开启子shell线程
前三种方法，脚本执行时会开启一个子shell环境，在子shell执行完后，子shell环境随即关闭，然后又回到当前shell中。
后面两种. 和source方式，则是在当前shell中执行，不会开启子shell。

shell变量：

name=阙乃源
name='阙乃源'
name="阙乃源"

echo $name 或 echo ${name} 的结果都是 阙乃源
区别是 (什么都不加) 与 (单引号) 不能识别特殊语法，(双引号)可以识别特殊语法 例如：
name2='${name}'  echo $name2  结果是：${name}
name2="${name}"  echo $name2  结果是：阙乃源
双引号里面可以加反斜杠\来取消语法，如：
name=阙乃源
echo $name			#运行结果  阙乃源
echo '$name'		#运行结果  $name
echo "$name"		#运行结果  阙乃源
echo "\$name"		#运行结果  $name


用反引号，反引号中的命令会被保留下来：现在可以直接用$()代替
name=ls    echo $name  结果是: ls
name=`ls`  echo $name  结果是: 将当前目录ls命令执行的结果，变成字符串保存在name变量中

echo $(ls) 执行过程：和echo `ls` 一样
shell扫描一遍命令行,发现了$(cmd)结构,便将$(cmd)中的cmd执行一次,得到其标准输出,
再将此输出放到原来命令 echo $(ls)中的 $(ls)位置，即替换了$(ls),再执行echo命令
如下：
echo $(ls)被替换成了echo 1.txt 2.txt
这里要注意的是$(cmd)中的命令的错误输出是不会被替换的，替换的只是标准输出


父、子shell的本地变量不能互通，都在各自的shell作用域

每个用户都有自己的环境变量配置文件：~/.bashrc 或者 ~/.profile 或者 ~/.bash_profile
如果全局环境变量配置文件和个人配置文件定义相同变量，个人的优先生效

当需要给所有用户都定义一个变量并且永久生效，写入全局配置文件：/etc/profile

set、declare命令能够找到当前shell环境中所有变量，(全局变量、局部变量，函数体)
env只显示当前shell全局变量
export 显示环境变量和设置临时环境变量，但是重启后失效
父shell用export导出的变量可以在被子shell继承，子shell改变继承的变量不会改变父shell该变量的值
子shell用export导出的变量不能被父shell使用，但是可以一会继承下去

Linux 中环境变量的文件
   
当进入系统的时候，Linux 就会读入系统的环境变量，
Linux中有很多记载环境变量的文件，它们被系统读入是按照一定的顺序的。
 
用户登录后加载profile和bashrc的流程如下: 
1)/etc/profile-------->/etc/profile.d/*.sh 
2)$HOME/.bash_profile-------->$HOME/.bashrc---------->/etc/bashrc 
bash首先执行/etc/profile脚本,/etc/profile脚本先依次执行/etc/profile.d/*.sh 
随后bash会执行用户主目录下的.bash_profile脚本,.bash_profile脚本会执行用户主目录下的.bashrc脚本, 
而.bashrc脚本会执行/etc/bashrc脚本，至此,所有的环境变量和初始化设定都已经加载完成.
bash随后调用terminfo和inputrc，完成终端属性和键盘映射的设定. 

特殊参数变量：
$n (功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数需要用大括号包含，如${10})
$# (功能描述：获取所有输入参数个数，常用于循环)
$* 和 $@ 
作用都是获取传递给脚本或函数的所有参数。
在没有双引号包裹时，$*与 $@相同：都是数组
当被双引号包裹时，$@与没有被双引号包裹时没有变化，$@仍然是一个数组，每个参数依然是分割独立的；
但当$*被双引号包裹时，SHELL会将所有参数整合为一个字符串。

特殊状态变量：
$？(功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；
如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）
$$ 当前shell脚本的进程号pid
$! 最近一次后台运行的进程号pid
$_ 获取上一次命令最后一个参数


执行一串命令：
ls; pwd; 他会在当前的shell执行，
(ls; pwd;)加上括号就是创建子shell执行命令

linux有一个BASH_SUBSHELL变量，为0说明在当前shell中执行，否则就是开辟的子shell执行。例如：
ls;echo $BASH_SUBSHELL      结果为0
(ls;echo $BASH_SUBSHELL)    结果为1
(ls;(echo $BASH_SUBSHELL))  结果为2

linux内置命令和外置命令

内置命令(如cd)：在系统启动时就加载入内存，常驻内存，执行效率更高，但是占用资源。
内置命令和shell是一体的，不会产生子shell去执行。

外置命令：系统需要从硬盘中读取程序文件，再读入内存加载。
也称之为自己下载的文件系统命令，处于bash shell之外的程序。外置命令一定会开启子shell来执行

怎么查看是否内置命令：
①用type命令验证， 比如type cd
②查看所有的内置命令：compgen -b

${vars},$vars : 取出变量结果
$(cmd) : 在括号中执行命令，且拿到执行的结果，会开启子shell
`cmd`  : 在反引号中执行命令，且拿到执行的结果，会开启子shell
(cmd)  : 开启子shell执行括号中的命令


数值计算
1、双括号 ：num=5; echo $((num=num+5))	   ,  结果为10
2、let命令：num=5; let num=num+6; echo $num,  结果为11

expr命令的模式匹配功能":"，字符串匹配上了就统计其长度：
expr "hhh.jpg" ":" ".*\.jpg"   结果是7，  因为匹配上了，所以$?的结果是0
expr "hhh.png" ":" ".*\.jpg"   结果是0，  因为没有匹配上，所以$?的结果是1

《判断文件后缀名是否为.jpg》
#/bin/sh

if expr "$1" ":" ".*\.jpg" ; then
        echo "这是jpg的文件"
else
        echo "这不是jpg文件"
fi

如果是jpg结尾的，则expr "$1" ":" ".*\.jpg" 指令会匹配上，也就是这条指令的退出码为0
我们知道退出码为0代表指令成功，所以if成立

《找出长度小于5的字符串》
#/bin/sh
for str in "i am your father!!!"
	do
		if [ `expr length $str` -lt 5 ]; then
			echo $str
		fi
	done
		
疑问，对于以上两个脚本，我测试了上面的if加上[]会有错，到底什么时候要加[]呢？
也就是这样为什么是错的：怎么执行都打印："这是jpg文件"
#/bin/sh
if [ `expr "$1" ":" ".*\.jpg"` ]; then
        echo "这是jpg的文件"
else
        echo "这不是jpg文件"
		
fi

因为：shell的if格式为 if [ condition ] ; then statement 这里判断的结果为true和false。
而true和false是在这个地方是不能直接用0或1代替的，因为对任意数字，shell返回的都是#true。
[ condition ]部分如果是一个函数或指令，而函数有return语句(指令有执行状态$?)，
此时返回值0会被当做#true，而其他数字则会被当做false。

在上面我们的expr "$1" ":" ".*\.jpg"不管匹配到与否，最后都是一个数字，也即都是if[ val ]，
但是对任意数字，shell返回的都是#true，所以我们不要加[]
也即：if expr "$1" ":" ".*\.jpg"，也即让if判断expr "$1" ":" ".*\.jpg"指令的执行状态，
匹配上了，指令的返回值是0，if成立，未匹配上，指令的返回值非零，if不成立


| 运算符：管道符号，command 1 | command 2，
他的功能是把第一个命令command 1执行的结果作为command2的输入传给command 2

&& 运算符：command1  && command2
命令之间使用 && 连接，实现逻辑与的功能。
只有在 && 左边的命令返回真（命令返回值 $? == 0），&& 右边的命令才会被执行。
只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。

|| 运算符: command1 || command2
命令之间使用 || 连接，实现逻辑或的功能。
只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行
只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。

bc命令结合管道符进行数学运算：支持小数运算
echo "4*5" | bc 

《计算1+2+...100》
方法一：用tr命令将中间的空格替换成+
echo {1..100} 会打印 1 2 3 ... 100
echo {1..100} | tr " " "+"  最后再传给bc即可echo {1..100} | tr " " "+" | bc

方法二：seq，-s 指定分隔符
seq -s "+" 100 最后传给bc。echo `seq -s "+" 100` | bc，这种方法的echo要加反引号，因为seq是命令

方法三：双括号计算，效率最高
echo $((`seq -s "+" 100`))

方法四：expr；如：expr 5 + 4，结果为9
它只接收分开的参数，所以我们seq -s " + " 100；也就是在+左右添加空格，再用xargs传递参数给expr
seq -s " + " 100 | xargs expr

awk运算(也支持小数运算)
echo "3.2 2.2" | awk '{print ($1+$2)}'

中括号计算：$[表达式]；echo $[8*7]

条件测试:
test
针对文件类型判断：
-e 该文件名/目录名是否存在
-f 该文件名是否为文件(file)
-d 该文件名是否为目录(directory)
-b 该文件名是否为一个block device
-c 该文件名是否为一个character device
-S 该文件名是否为一个Socket文件
-p 该文件名是否为一个FIFO(pipe)文件
-L 该文件名是否为一个连结档

test：测试文件/文件夹是否存在，不在的话则创建他
test -e "shell" && echo "该文件/目录已存在，不再创建" || mkdir shell

两个文件之间的比较，如:test file1 -nt file2

-nt ( newer than)判断file1是否比 file2  新
-ot (older than) 判断 file1是否比 file2 旧
-ef 判断file2与 file2是否为同一文件，可用在判断 hard link 的判定上。主要意义在判定两个文件是否均指向同一个 inode !

关于两个整数之间的判定，例如test n1 -eq n2	#针对变量数值的大小比较判断

-eq两数值相等（equal)-ne两数值不等(not equal)-gt n1 大于n2 (greater than)-lt n1小于n2 ( less than)
-ge n1 大于等于n2 (greater than or equal)-le n1 小于等于n2 ( less than or equal)

判定字符串的数据
test -z string    判定字符串是否为空?  若 string 为空字符串，则为 true
test -n string    判定字符串是否非空?  若 string 为空字符串，则为 false。注:-n亦可省略
test str1 = str2  判定str1是否等于str2 ，若相等，则回传true
test str1 != str2 判定str1是否不等于str2 ，若相等，则回传false

多重条件判定，例如:test -r filename -a -x filename
-a (and)两状况同时成立!		例如test -r file -a -x file，则file同时具有r与x权限时，才回传true。
-o (on) 两状况任何一个成立!	例如test -r file -o -x file，则 file具有r或x权限时，就可回传true。
!反相状态，如test ! -x file ,当file不具有x时，回传true

中括号[ ]、[[  ]]条件测试：和test一样，但是有几点注意事项：
中括号前后必须有空格，不然语法上就会报错
[[]]还支持正则表达处理
条件测试中使用变量，必须使用双引号：[ -n "$filename" ] 正确写法：
string=filename
test -f "$string" && echo yes || echo no
[ -f "$string" ] && echo yes || echo no

数值比较方面。
test、[ ]、[[ ]] (( ))，他们都支持-eq、-lt 以及 <、>、！= ...等语法，但是[ ] 用<、>、！= 这类时候需要加\转义

逻辑比较方面。
[ ]和test中使用 -a -o !
[[ ]] 和 (( ))中使用 && || ！

定时启动脚本：要先安装
linux中crontab用于设置周期性被执行的指令
service crond start     //启动服务
service crond stop      //关闭服务
service crond restart   //重启服务
service crond reload    //重新载入配置
service crond status    //查看crontab服务状态
       分 时 日 月 周   / 代表每的意思
例子：*/1 * * * * echo "hello" >> /tmp/test.txt   #每分钟执行一次
#注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了

获取available内存的命令：free -m | awk 'NR==2 {print $NF}'  #NR==2表示第二行，$NF 表示的最后一个Field（列），即输出最后一个字段的内容

wc统计命令：

①wc -l f1：统计文档中的文字行数。
②wc -c f1：统计文档中的字节数。
③wc -m f1：统计文档中的字符数。
④wc -w f1：统计文档中的单词数。
⑤wc -L f1：统计文档中最长行的长度。

shell函数定义方法：

标准写法：
function 函数名(){
	函数体
}

偷懒写法：
function 函数名{
	函数体
}

超级偷懒写法：
函数名(){
	函数体
}

函数如果单独写在一个文件里，需要用source读取
函数内使用local定义局部变量

