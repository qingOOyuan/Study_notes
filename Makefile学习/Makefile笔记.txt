在Makefile语法中的赋值语句，=、:=、?=

1. "="
= 是最普通的等号，然而在Makefile中确实最容易搞错的赋值等号，
使用”=”进行赋值，变量的值是整个makefile中最后被指定的值。举例：

VIR_A = A
VIR_B = $(VIR_A) B
VIR_A = AA

经过上面的赋值后，最后VIR_B的值是AA B，而不是A B。在make时，会把整个makefile展开，最后决定变量的值

2. ":="
:= 就表示直接赋值，赋予当前位置的值。举例：

VIR_A := A
VIR_B := $(VIR_A) B
VIR_A := AA

最后变量VIR_B的值是A B，即根据当前位置进行赋值。因此相比于"="，":="才是真正意义上的直接赋值。

3. "?="

?= 表示如果该变量没有被赋值，则赋予等号后的值。举例：

......
VIR ?= new_value
如果VIR在之前没有被赋值，那么VIR的值就为new_value.

VIR := old_value
VIR ?= new_value
这种情况下，VIR的值就是old_value

4. "+="
+= 和平时写代码的理解是一样的，表示将等号后面的值添加到前面的变量上


test.c:
#include <stdio.h>
int main()
{
        printf("hello world\n");
        return 0;
}

预处理(Preprocessing)  gcc -E test.c -o test.i
以“#”号开头的预处理指令，如包含#include,宏定义制定#define等。在源程序中这些指令都放在函数之外，而且一般放在源文件的前面。
上述命令中-E是让编译器在预处理之后就退出，不进行后续编译过程；-o是指定输出文件名。
预处理生成的是test.i的文本文件，在本例中，预处理结果就是将stdio.h 文件中的内容插入到test.c中了。

编译(Compilation)      gcc -S test.i -o test.s
这里的编译不是指程序从源文件到二进制程序的全部过程，而是指将经过预处理文件（test.i）之后的程序转换成特定汇编（test.s）代码的过程。
上述命令中-S让编译器在编译之后停止，不进行后续过程；当然可以源文件一步到位生成汇编文件：gcc -S test.c -o test.s
-o是指定输出文件名。编译过程完成后，将生成程序的汇编代码test.s，这也是文本文件。

汇编(Assemble)         gcc -c test.s -o test.o
汇编过程将上一步的汇编代码转换成机器码，这一步产生的文件叫做目标文件，是二进制格式。
上述命令中-c让编译器在汇编之后停止，不进行后续过程；当然可以源文件一步到位生成目标文件：gcc -c test.c -o test.o，也可以 gcc -c test.i -o test.o

链接(Linking)   	   gcc test.o -o test
链接过程使用链接器将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件。附加的目标文件包括静态连接库和动态连接库。
当然可以源文件一步到位生成可执行文件：gcc test.c -o test，也可以 gcc test.i -o test


总结

生成可执行程序(ELF)过程为成四个步骤：

1、由.c文件到.i文件，这个过程叫预处理。		main.c -->  main.i
2、由.i文件到.s文件，这个过程叫编译。		main.i -->  main.s		
3、由.s文件到.o文件，这个过程叫汇编。		main.s -->  main.o
4、由.o文件到可执行文件，这个过程叫链接。	main.o -->  main	 （这个文件烧写到sd卡是不能运行的，它里面含有一些其他的信息，不是只有二进制文件，但是操作系统可以直接运行他）
5、裸板要运行的话要将ELF文件生成二进制文件，main   -->  main.bin （用objcopy）


$@  表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，"$@"就是匹配于目标中模式定义的集合
$^  所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份。
$<  依赖目标中的第一个目标名字。如果依赖目标是以模式（即"%"）定义的，那么"$<"将是符合模式的一系列的文件集。注意，其是一个一个取出来的。
$?  表示比目标还要新的依赖文件列表

$+ 这个变量很像$^，也是所有依赖目标的集合。只是它不去除重复的依赖目标。

如果make执行时，带入make参数-n或--just-print，那么其只是显示命令，但不会执行命令，
这个功能很有利于我们调试我们的Makefile，看看我们书写的命令是执行起来是什么样子的或是什么顺序的。

而make参数-s或--slient则是全面禁止命令的显示。

$(subst FROM,TO,TEXT),即将TEXT中的东西从FROM替换为TO


例1：$(var: <suffix>=<replacement>)
$(var:a=b)或是${var:a=b}，其意思是，把变量var中所有以a字串结尾的a替换成b字串。这里的结尾意思是空格或是结束符。
foo := a.o b.o c.o
bar := $(foo:.o=.c)
把$(foo)中所有以.o字串结尾全部替换成.c，所以我们的$(bar)的值就是a.c b.c c.c

例2：$(var:<pattern>=<replacement>)
foo := a.o b.o c.o
bar := $(foo:%.o=%.c)
这依赖于被替换字串中的有相同的模式，模式中必须包含一个%字符，这个例子同样让$(bar)变量的值为a.c b.c c.c



$(sort LIST)
给字串LIST中的单词以首字母为准进行排序（升序），并去掉重复的单词